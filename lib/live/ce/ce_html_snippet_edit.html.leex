   <%= f = form_for @changeset, "#", as: :step_data, theme: :tw_default,phx_change: :validate, phx_submit: :save, phx_target: @myself, id: @id %>

   <div class="my-4 text-center">
     <button class="btn btn-primary" type="submit">Save</button>
   </div>

   <%= if @conf[:mode] == :tweak do  %>
   <%= live_component @socket, MavuSnippetsUi.Live.Ce.Components.TweakFields , f: f %>
   <% end %>


   <div phx-hook="TinyMceHook" id="tinymce_editors">

     <div class="grid-cols-1 mt-6 _grid gap-y-6 gap-x-4 sm:grid-cols-6 sm:min-w-2xl" defer-x-data="{
         getEditorConf: function (target) {
           return {
             menubar: false,
             inline: true,
             target: target,
             plugins: ['visualblocks', 'code', 'autosave', 'link'],
             toolbar: [
               'undo redo | bold italic underline | h2 h3 h4 | link | visualblocks code '
             ],
             force_br_newlines : true,
             force_p_newlines : false,
             valid_elements: 'p,strong,em,span,a[href|target=_blank|title],ul,ol,li,h1,h2,h3,h4,br',
             init_instance_callback: function(editor) {
                editor.on('blur', function(e) {
                  editor.save();
                  console.log('tinymce trigger save');
                });
             },
             setup: function(editor) {
                editor.on('init', function(e) {
                  editor.save();
                  console.log('tinymce trigger save on init');
                });
              },
           };
         },
         initEditor: function (name) {
           el = document.getElementById('step_data[' + name + ']')
           res = tinymce.init(this.getEditorConf(el))
         }
       }" x-init="
        () => {
          console.log('tinymce init');
              tinymce.remove()
              initEditor('text_l1')
              initEditor('text_l2')
        }
            ">

       <div class="sm:col-span-3" phx-update="ignore">
         <%= input  f, :text_l1,  using: :textarea, rows: 5 ,label: "Text:",append_classes: "editable ",
            wrapped_input: [update_html: :custom_fn],
            custom_fn: fn assigns -> %>
         <div class="prose-sm prose border border-gray-400 rounded">
           <div class="px-2 py-1 " id="<%= input_name(@form, @field) %>" x-ref="<%= @field %>">
             <%= input_value(@form, @field) |> raw() %></div>
         </div>
         <% end %>

       </div>

       <div class="hidden sm:col-span-3" phx-update="ignore">
         <%= input  f, :text_l2,  using: :textarea, rows: 5 ,label: "Text (DE):",append_classes: "editable ",
        wrapped_input: [update_html: :custom_fn],
        custom_fn: fn assigns -> %>
         <div class="prose-sm prose border border-gray-400 rounded">
           <div class="px-2 py-1 " id="<%= input_name(@form, @field) %>" x-ref="<%= @field %>">
             <%= input_value(@form, @field) |> raw() %></div>
         </div>
         <% end %>

       </div>
     </div>


   </div>

   </form>
